// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // Relations
  createdProjects     Project[]           @relation("ProjectCreator")
  projectMemberships  ProjectMember[]
  createdPages        Page[]              @relation("PageCreator")
  createdPageElements PageElement[]       @relation("PageElementCreator")
  createdTestCases    TestCase[]          @relation("TestCaseCreator")
  sentInvitations     ProjectInvitation[] @relation("InvitationSender")
  receivedInvitations ProjectInvitation[] @relation("InvitationReceiver")
  projectVariables  ProjectVariable[] @relation("ProjectVariableCreator")
  testSuiteVariables    TestSuiteVariable[]   @relation("TestSuiteVariableCreator")
  projectFunctions  ProjectFunction[] @relation("ProjectFunctionCreator")
  testSuiteFunctions    TestSuiteFunction[]   @relation("TestSuiteFunctionCreator")
  testSuites        TestSuites[]      @relation("TestSuitesCreator")
  notifications     Notification[]     @relation("UserNotifications") // Add this line

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  baseUrl     String?  @map("base_url") // For CI/CD integration
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator         User?               @relation("ProjectCreator", fields: [createdBy], references: [id])
  members         ProjectMember[]      @relation("ProjectMembers")
  pages           Page[]              @relation("ProjectPages")
  invitations     ProjectInvitation[] @relation("ProjectInvitations")
  testSuites      TestSuites[]        @relation("ProjectTestSuites")
  globalVariables ProjectVariable[]   @relation("ProjectVariables")
  globalFunctions ProjectFunction[]   @relation("ProjectFunctions")
  
  @@map("projects")
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  userId    String   @map("user_id")
  role      String // 'QA', 'Developer', 'Admin', 'Viewer'
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation("ProjectMembers", fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// NEW: Groups for organizing tests, variables, functions
model TestSuites {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  name        String
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project   Project         @relation("ProjectTestSuites", fields: [projectId], references: [id], onDelete: Cascade)
  creator   User?            @relation("TestSuitesCreator", fields: [createdBy], references: [id])
  testCases TestCase[]       @relation("TestSuiteTestCases")
  variables TestSuiteVariable[] @relation("TestSuiteVariables")
  functions TestSuiteFunction[] @relation("TestSuiteFunctions")
  runs TestSuiteRun[] @relation("TestSuiteRuns")
  @@map("test_suites")
}

// NEW: Project-level (global) variables
model ProjectVariable {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  name        String // Variable name (without @ symbol)
  value       String // Selector or value
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation("ProjectVariables", fields: [projectId], references: [id], onDelete: Cascade)
  creator User?    @relation("ProjectVariableCreator", fields: [createdBy], references: [id])

  @@unique([projectId, name])
  @@map("project_variables")
}

// NEW: Group-level variables
model TestSuiteVariable {
  id          Int      @id @default(autoincrement())
  testSuiteId     Int      @map("test_suite_id")
  name        String // Variable name (without @ symbol)
  value       String // Selector or value
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  testSuite   TestSuites @relation("TestSuiteVariables", fields: [testSuiteId], references: [id], onDelete: Cascade)
  creator User?  @relation("TestSuiteVariableCreator", fields: [createdBy], references: [id])

  @@unique([testSuiteId, name])
  @@map("test_suite_variables")
}

// NEW: Project-level (global) functions
model ProjectFunction {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  name        String // Function name
  code        String   @db.Text // DSL code for the function
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation("ProjectFunctions", fields: [projectId], references: [id], onDelete: Cascade)
  creator User?    @relation("ProjectFunctionCreator", fields: [createdBy], references: [id])

  @@unique([projectId, name])
  @@map("project_functions")
}

// NEW: Group-level functions
model TestSuiteFunction {
  id          Int      @id @default(autoincrement())
  testSuiteId     Int      @map("test_suite_id")
  name        String // Function name
  code        String   @db.Text // DSL code for the function
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  testSuite   TestSuites @relation("TestSuiteFunctions", fields: [testSuiteId], references: [id], onDelete: Cascade)
  creator User?  @relation("TestSuiteFunctionCreator", fields: [createdBy], references: [id])

  @@unique([testSuiteId, name])
  @@map("test_suite_functions")
}

model TestSuiteRun {
  id          Int      @id @default(autoincrement())
  testSuiteId Int      @map("test_suite_id")
  status      TestRunStatus @default(RUNNING)
  startedAt   DateTime @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  totalTests  Int      @default(0) @map("total_tests")
  passedTests Int      @default(0) @map("passed_tests")
  failedTests Int      @default(0) @map("failed_tests")
  skippedTests Int     @default(0) @map("skipped_tests")
  errorMessage String? @map("error_message")
  environment String?  // e.g., "development", "staging", "production"
  browser    String?  // e.g., "chrome", "firefox", "safari"
  version    String?  // browser version
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  testSuite TestSuites @relation("TestSuiteRuns", fields: [testSuiteId], references: [id], onDelete: Cascade)
  testCaseRuns TestCaseRun[] @relation("TestSuiteRunTestCases")
  
  @@map("test_suite_runs")
}

model TestCaseRun {
  id            Int      @id @default(autoincrement())
  testCaseId    Int      @map("test_case_id")
  testSuiteRunId Int     @map("test_suite_run_id")
  status        TestCaseRunStatus @default(RUNNING)
  startedAt     DateTime @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  duration      Int?     // Duration in milliseconds
  errorMessage  String?  @map("error_message")
  stackTrace    String?  @map("stack_trace") @db.Text
  logs          String?  @db.Text // Console logs or test output
  
  // Relations
  testCase     TestCase     @relation("TestCaseRuns", fields: [testCaseId], references: [id], onDelete: Cascade)
  testSuiteRun TestSuiteRun @relation("TestSuiteRunTestCases", fields: [testSuiteRunId], references: [id], onDelete: Cascade)
  stepResults  TestStepResult[] @relation("TestCaseRunSteps")
  
  @@map("test_case_runs")
}

model TestStepResult {
  id            Int      @id @default(autoincrement())
  testCaseRunId Int      @map("test_case_run_id")
  stepNumber    Int      @map("step_number") // Which step in the sequence (1, 2, 3...)
  stepName      String   @map("step_name") // Human-readable step description
  status        TestStepStatus @default(RUNNING)
  startedAt     DateTime @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  duration      Int?     // Duration in milliseconds
  errorMessage  String?  @map("error_message")
  screenshot    String?  // URL or path to screenshot for this specific step
  logs          String?  @db.Text // Step-specific logs
  
  // Relations
  testCaseRun TestCaseRun @relation("TestCaseRunSteps", fields: [testCaseRunId], references: [id], onDelete: Cascade)
  
  @@map("test_step_results")
}

model Page {
  id           Int      @id @default(autoincrement())
  projectId    Int      @map("project_id")
  name         String
  url          String
  description  String?
  isProtected  Boolean  @default(false) @map("is_protected") // NEW: Auth required
  authFunction String?  @map("auth_function") // NEW: Function name for auth
  createdBy    String?   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  project  Project       @relation("ProjectPages", fields: [projectId], references: [id], onDelete: Cascade)
  creator  User?          @relation("PageCreator", fields: [createdBy], references: [id])
  elements PageElement[]  @relation("PageElements")

  @@map("pages")
}

model PageElement {
  id          Int      @id @default(autoincrement())
  pageId      Int      @map("page_id")
  elementName String   @map("element_name")
  selector    String
  description String?
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  page    Page @relation("PageElements", fields: [pageId], references: [id], onDelete: Cascade)
  creator User? @relation("PageElementCreator", fields: [createdBy], references: [id])

  @@map("page_elements")
}

model TestCase {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  testSuiteId     Int?     @map("test_suite_id")
  name        String
  description String?
  code        String   @db.Text
  createdBy   String?   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  testSuite      TestSuites?     @relation("TestSuiteTestCases", fields: [testSuiteId], references: [id])
  creator        User?            @relation("TestCaseCreator", fields: [createdBy], references: [id])
  testCaseRuns   TestCaseRun[]    @relation("TestCaseRuns")

  @@map("test_cases")
}

model ProjectInvitation {
  id           Int      @id @default(autoincrement())
  projectId    Int      @map("project_id")
  userId       String   @map("user_id")
  invitedBy    String   @map("invited_by")
  status       ProjectInvitationStatus   @default(PENDING)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation("ProjectInvitations", fields: [projectId], references: [id], onDelete: Cascade)
  inviter User    @relation("InvitationSender", fields: [invitedBy], references: [id])
  user    User    @relation("InvitationReceiver", fields: [userId], references: [id])
  @@map("project_invitations")
}

enum ProjectInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum TestRunStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum TestCaseRunStatus {
  RUNNING
  PASSED
  FAILED
  SKIPPED
  TIMEOUT
  ERROR
}

enum TestStepStatus {
  RUNNING
  PASSED
  FAILED
  SKIPPED
  TIMEOUT
  ERROR
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  type        NotificationType
  title       String
  message     String
  isRead      Boolean  @default(false) @map("is_read")
  actionUrl   String?  @map("action_url") // URL to navigate to when clicked
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  PROJECT_INVITATION      // Project invitation received
  PROJECT_MEMBER_JOINED   // New member joined project
  ROLE_CHANGED            // User role changed in project
  TEST_SUITE_COMPLETED    // Test suite execution completed
  FEATURE_UPDATE          // New feature available
}


generator zod {
  provider = "zod-prisma-types"
  output   = "../generated/zod"
}